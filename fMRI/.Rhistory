p <- ggplot(df_stacked, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="yellow") +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
dec_factor <- 1.65
max_x <- max(df_stacked$x) * dec_factor
min_x <- min(df_stacked$x) * dec_factor
max_y <- max(df_stacked$y) * dec_factor
min_y <- min(df_stacked$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_stacked, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="yellow") +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
dec_factor <- 1.65
max_x <- max(df_stacked$x) * dec_factor
min_x <- min(df_stacked$x) * dec_factor
max_y <- max(df_stacked$y) * dec_factor
min_y <- min(df_stacked$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_stacked, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="yellow", shape = 15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
dec_factor <- 1.65
max_x <- max(df_stacked$x) * dec_factor
min_x <- min(df_stacked$x) * dec_factor
max_y <- max(df_stacked$y) * dec_factor
min_y <- min(df_stacked$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_stacked, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="#FFD700", shape = 15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
head(test)
zzz <- t(train[1, 5:ncol(train)])
head(zzz)
head(df_stacked)
zzz <- t(as.vector(train[1, 5:ncol(train)]))
head(zzz)
zzz <- t(train[1, 5:ncol(train)])
head(zzz)
# Visualizzazione del nuovo dataframe
head(df_stacked, 10)
subset_asd <- train[train$y == 1, 4:ncol(train)]
start <- 1
load("Data/coordinates.RData")
train <- read.csv("Data/train_hw03.csv")
test  <- read.csv("Data/test_hw03.csv")
train$y = ifelse(train$y=="autism", 1, 0)
train$sex = ifelse(train$sex=="male", 1, 0)
test$sex = ifelse(test$sex=="male", 1, 0)
N_ROIs <- 116
ROI_length <- 115
subset_td  <- train[train$y == 0, 5:ncol(train)]
subset_asd <- train[train$y == 1, 5:ncol(train)]
mean_td_subject  <- colMeans(subset_td)
mean_asd_subject <- colMeans(subset_asd)
mean_td_subject
df_td  <- data.frame(cbind(x=rep(coordinates$x, each=ROI_length), y=rep(coordinates$y, each=ROI_length),
values=mean_td_subject, time_step=rep(1:ROI_length, N_ROIs)))
coordinates <- aal116coordinates[, 2:3]
df_td  <- data.frame(cbind(x=rep(coordinates$x, each=ROI_length), y=rep(coordinates$y, each=ROI_length),
values=mean_td_subject, time_step=rep(1:ROI_length, N_ROIs)))
df_asd <- data.frame(cbind(x=rep(coordinates$x, each=ROI_length), y=rep(coordinates$y, each=ROI_length),
values=mean_td_subject, time_step=rep(1:ROI_length, N_ROIs)))
dec_factor <- 1.65
max_x <- max(coordinates$x) * dec_factor
min_x <- min(coordinates$x) * dec_factor
max_y <- max(coordinates$y) * dec_factor
min_y <- min(coordinates$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_stacked, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="#FFD700", shape = 15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
dec_factor <- 1.65
max_x <- max(coordinates$x) * dec_factor
min_x <- min(coordinates$x) * dec_factor
max_y <- max(coordinates$y) * dec_factor
min_y <- min(coordinates$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_td, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="#FFD700", shape = 15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
dec_factor <- 1.65
max_x <- max(coordinates$x) * dec_factor
min_x <- min(coordinates$x) * dec_factor
max_y <- max(coordinates$y) * dec_factor
min_y <- min(coordinates$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_td, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="chartreuse", shape = 15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
dec_factor <- 1.65
max_x <- max(coordinates$x) * dec_factor
min_x <- min(coordinates$x) * dec_factor
max_y <- max(coordinates$y) * dec_factor
min_y <- min(coordinates$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_td, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)+5), color="chartreuse", shape=15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
par(mar = c(4, 4, .1, .1))
dec_factor <- 1.65
max_x <- max(coordinates$x) * dec_factor
min_x <- min(coordinates$x) * dec_factor
max_y <- max(coordinates$y) * dec_factor
min_y <- min(coordinates$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_td, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="chartreuse", shape=15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
# Path to the image file
image_path <- "Data/asd.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_asd, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="chartreuse", shape = 15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
gc()
load("Data/coordinates.RData")
train <- read.csv("Data/train_hw03.csv")
test  <- read.csv("Data/test_hw03.csv")
train$y = ifelse(train$y=="autism", 1, 0)
train$sex = ifelse(train$sex=="male", 1, 0)
test$sex = ifelse(test$sex=="male", 1, 0)
coordinates <- aal116coordinates[, 2:3]
N_ROIs <- 116
ROI_length <- 115
# Install and load the required packages
library(ggplot2)
library(gganimate)
library(grid)
library(jpeg)
subset_td  <- train[train$y == 0, 5:ncol(train)]
subset_asd <- train[train$y == 1, 5:ncol(train)]
# Calculate the mean over the rows of each column (except class column)
mean_td_subject  <- t(colMeans(subset_td))
mean_asd_subject <- t(colMeans(subset_asd))
df_td  <- data.frame(cbind(x=rep(coordinates$x, each=ROI_length), y=rep(coordinates$y, each=ROI_length),
values=mean_td_subject, time_step=rep(1:ROI_length, N_ROIs)))
df_asd <- data.frame(cbind(x=rep(coordinates$x, each=ROI_length), y=rep(coordinates$y, each=ROI_length),
values=mean_td_subject, time_step=rep(1:ROI_length, N_ROIs)))
dec_factor <- 1.65
max_x <- max(coordinates$x) * dec_factor
min_x <- min(coordinates$x) * dec_factor
max_y <- max(coordinates$y) * dec_factor
min_y <- min(coordinates$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_td, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="chartreuse", shape=15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
gc()
load("Data/coordinates.RData")
train <- read.csv("Data/train_hw03.csv")
test  <- read.csv("Data/test_hw03.csv")
train$y = ifelse(train$y=="autism", 1, 0)
train$sex = ifelse(train$sex=="male", 1, 0)
test$sex = ifelse(test$sex=="male", 1, 0)
coordinates <- aal116coordinates[, 2:3]
N_ROIs <- 116
ROI_length <- 115
# Install and load the required packages
library(ggplot2)
library(gganimate)
library(grid)
library(jpeg)
subset_td  <- train[train$y == 0, 5:ncol(train)]
subset_asd <- train[train$y == 1, 5:ncol(train)]
mean_td_subject  <- t(colMeans(subset_td))
mean_td_subject
subset_td
colMeans(subset_td)
t(colMeans(subset_td))
colMeans(subset_td)
class(subset_td)
class(mean_td_subject)
data.frame(mean_td_subject)
apply(subset_td, 1, mean)
apply(subset_td, 0, mean)
mean_td_subject  <- t(apply(subset_td, 1, mean))
df_td  <- data.frame(cbind(x=rep(coordinates$x, each=ROI_length), y=rep(coordinates$y, each=ROI_length),
values=mean_td_subject, time_step=rep(1:ROI_length, N_ROIs)))
mean_td_subject  <- data.frame(t(apply(subset_td, 1, mean)))
mean_td_subject  <- data.frame(apply(subset_td, 1, mean))
mean_td_subject  <- data.frame(colMeans(subset_td))
mean_td_subject  <- data.frame(colMeans(subset_td))
mean_asd_subject <- data.frame(colMeans(subset_asd))
df_td  <- data.frame(cbind(x=rep(coordinates$x, each=ROI_length), y=rep(coordinates$y, each=ROI_length),
values=mean_td_subject[, 1], time_step=rep(1:ROI_length, N_ROIs)))
df_asd <- data.frame(cbind(x=rep(coordinates$x, each=ROI_length), y=rep(coordinates$y, each=ROI_length),
values=mean_asd_subject[, 1], time_step=rep(1:ROI_length, N_ROIs)))
dec_factor <- 1.65
max_x <- max(coordinates$x) * dec_factor
min_x <- min(coordinates$x) * dec_factor
max_y <- max(coordinates$y) * dec_factor
min_y <- min(coordinates$y) * (dec_factor-0.35)
# Path to the image file
image_path <- "Data/td.jpg"
# Read the JPEG image
image_data <- readJPEG(image_path)
# Plot the animated points with the image as background
p <- ggplot(df_td, aes(x=x, y=y-10)) +
annotation_custom(
rasterGrob(image_data, width=unit(1, "npc"), height=unit(1, "npc")),
xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf
) +
geom_point(aes(size=abs(values), alpha=abs(values)), color="chartreuse", shape=15) +
labs(x=NULL, y=NULL) +
theme_void() +
xlim(min_x, max_x) +
ylim(min_y, max_y) +
theme(legend.position="none")
# Create the animated plot
animated_plot <- p +
transition_time(time_step) +
ease_aes("linear")
# Render and play the animation
animate(animated_plot)
gc()
# Carica il pacchetto neuralnet
library(neuralnet)
install.packages(neuralnet)
install.packages("neuralnet")
# Carica il pacchetto neuralnet
library(neuralnet)
# Preparazione dei dati (esempio)
# X contiene le caratteristiche di input
# y contiene le etichette di classe
X <- iris[, 1:4]
y <- iris[, 5]
# Dividi i dati in set di addestramento e test
set.seed(123)
train_indices <- sample(1:nrow(iris), 0.7 * nrow(iris))
train_data <- iris[train_indices, ]
test_data <- iris[-train_indices, ]
# Definizione dell'architettura della rete neurale
# Definizione dell'architettura della rete neurale
# In questo esempio, utilizziamo una rete con un singolo strato nascosto
# di 5 nodi e la funzione di attivazione sigmoid
# Definizione dell'architettura della rete neurale
# In questo esempio, utilizziamo una rete con un singolo strato nascosto
# di 5 nodi e la funzione di attivazione sigmoid
net <- neuralnet(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
net
net <- neuralnet(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = train_data,
hidden = c(5), # Numero di nodi nello strato nascosto
act.fct = "logistic")
trained_net <- train(net)
install.packages("keras")
library(keras)
# Imposta il backend su TensorFlow
backend$set_backend("tensorflow")
keras::backend()$set_backend("tensorflow")
install_tensorflow()
# Imposta il backend su TensorFlow
keras::backend()$set_backend("tensorflow")
# Definisci l'architettura del modello
model <- keras_model_sequential()
reticulate::py_config()
library(keras)
# Definisci l'architettura del modello
model <- keras_model_sequential()
model %>%
layer_dense(units = 64, activation = "relu", input_shape = c(784)) %>%
layer_dense(units = 10, activation = "softmax")
# Compila il modello
model %>% compile(
loss = "categorical_crossentropy",
optimizer = optimizer_adam(),
metrics = c("accuracy")
)
install.packages("tensorflow")
install.packages("tensorflow")
library(reticulate)
path_to_python <- install_python()
library(keras)
library(mlbench)
install.packages("mlbench")
#install.packages("mlbench")
library(mlbench)
library(dplyr)
library(magrittr)
library(neuralnet)
data("BostonHousing")
data <- BostonHousing
str(data)
data %<>% mutate_if(is.factor, as.numeric)
n <- neuralnet(medv ~ crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+b+lstat,
data = data,
hidden = c(12,7),
linear.output = F,
lifesign = 'full',
rep=1)
plot(n,col.hidden = 'darkgreen',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'lightblue')
data <- as.matrix(data)
dimnames(data) <- NULL
set.seed(123)
ind <- sample(2, nrow(data), replace = T, prob = c(.7, .3))
training <- data[ind==1,1:13]
test <- data[ind==2, 1:13]
trainingtarget <- data[ind==1, 14]
testtarget <- data[ind==2, 14]
str(trainingtarget)
str(testtarget)
str(testtarget)
m <- colMeans(training)
s <- apply(training, 2, sd)
training <- scale(training, center = m, scale = s)
test <- scale(test, center = m, scale = s)
model <- keras_model_sequential()
library(tensorflow)
install_tensorflow(envname = "r-reticulate")
Y
install.packages("keras")
library(keras)
install.packages("keras")
library(keras)
install_keras(envname = "r-reticulate")
library(tensorflow)
tf$constant("Hello Tensorflow!")
library(tensorflow)
tf$constant("Hello Tensorflow!")
install_tensorflow(envname = "r-reticulate")
library(tensorflow)
tf$constant("Hello Tensorflow!")
