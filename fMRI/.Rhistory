#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
labels <- to_categorical(train$y[-to_del])
mat_nor
mat_nor <- mat_corr[train$y[-to_del]==0,]
mat_aut <- mat_corr[train$y[-to_del]==1,]
hist(mat_aut[,12],freq=F)
hist(mat_nor[,12], add = T,freq = F)
quan_list <- rep(NA,116)
for (i in 1:116){
quan_nor <- quantile(mat_nor[,i], probs = c(0.25,0.75))
quan_aut <- quantile(mat_aut[,i], probs = c(0.25,0.75))
quan_list[i] <- abs(quan_nor[1]-quan_aut[1]) + abs(quan_nor[2]-quan_aut[2])
}
primi_10 <- order(quan_list, decreasing = T)[1:20]
quan_list[primi_10]
primi_10 <- order(quan_list, decreasing = T)[1:10]
quan_list[primi_10]
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(2000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi_10],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/400
primi_10
hist(mat_aut[,12],freq=F)
hist(mat_nor[,12], add = T,freq = F)
mat_corr <- matrix(nrow = 600, ncol = 116)
#mat_corr[,117] <- train$age
#mat_corr[,118] <- train$sex
for (j in 1:600){
mat_corr[j,1:116] <- apply(abs(pcor(mod[[j]])$estimate), MARGIN = 2, function(x) {sum(x>0.99)-1})
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
labels <- to_categorical(train$y[-to_del])
mat_corr
mat_corr <- mat_corr[-to_del,]
labels <- to_categorical(train$y[-to_del])
mat_nor <- mat_corr[train$y[-to_del]==0,]
mat_aut <- mat_corr[train$y[-to_del]==1,]
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
labels <- to_categorical(train$y[-to_del])
mat_nor <- mat_corr[train$y[-to_del]==0,]
mat_aut <- mat_corr[train$y[-to_del]==1,]
hist(mat_aut[,12],freq=F)
hist(mat_nor[,12], add = T,freq = F)
hist(mat_aut[,12],freq=F)
quan_list <- rep(NA,116)
for (i in 1:116){
quan_nor <- quantile(mat_nor[,i], probs = c(0.25,0.75))
quan_aut <- quantile(mat_aut[,i], probs = c(0.25,0.75))
quan_list[i] <- abs(quan_nor[1]-quan_aut[1]) + abs(quan_nor[2]-quan_aut[2])
}
primi_10 <- order(quan_list, decreasing = T)[1:10]
quan_list[primi_10]
primi_10
quan_list
mat_corr <- matrix(nrow = 600, ncol = 116)
#mat_corr[,117] <- train$age
#mat_corr[,118] <- train$sex
for (j in 1:600){
mat_corr[j,1:116] <- apply(abs(pcor(mod[[j]])$estimate), MARGIN = 2, function(x) {sum(x>0.99)-1})
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
mat_corr
labels <- to_categorical(train$y[-to_del])
mat_nor <- mat_corr[train$y[-to_del]==0,]
mat_aut <- mat_corr[train$y[-to_del]==1,]
hist(mat_aut[,12],freq=F)
hist(mat_nor[,12], add = T,freq = F)
quan_list <- rep(NA,116)
for (i in 1:116){
quan_nor <- quantile(mat_nor[,i], probs = c(0.25,0.75))
quan_aut <- quantile(mat_aut[,i], probs = c(0.25,0.75))
quan_list[i] <- abs(quan_nor[1]-quan_aut[1]) + abs(quan_nor[2]-quan_aut[2])
}
primi_10 <- order(quan_list, decreasing = T)[1:10]
quan_list[primi_10]
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(2000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi_10],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/400
mat_corr <- matrix(nrow = 600, ncol = 116)
#mat_corr[,117] <- train$age
#mat_corr[,118] <- train$sex
for (j in 1:600){
mat_corr[j,1:116] <- apply(abs(pcor(mod[[j]])$estimate), MARGIN = 2, function(x) {sum(x<0.3)})
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
mat_corr
mat_corr <- matrix(nrow = 600, ncol = 116)
#mat_corr[,117] <- train$age
#mat_corr[,118] <- train$sex
for (j in 1:600){
mat_corr[j,1:116] <- apply(abs(pcor(mod[[j]])$estimate), MARGIN = 2, function(x) {sum(x<0.1)})
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
labels <- to_categorical(train$y[-to_del])
mat_nor <- mat_corr[train$y[-to_del]==0,]
mat_aut <- mat_corr[train$y[-to_del]==1,]
hist(mat_aut[,12],freq=F)
hist(mat_nor[,12], add = T,freq = F)
quan_list <- rep(NA,116)
for (i in 1:116){
quan_nor <- quantile(mat_nor[,i], probs = c(0.25,0.75))
quan_aut <- quantile(mat_aut[,i], probs = c(0.25,0.75))
quan_list[i] <- abs(quan_nor[1]-quan_aut[1]) + abs(quan_nor[2]-quan_aut[2])
}
primi_10 <- order(quan_list, decreasing = T)[1:10]
quan_list[primi_10]
quan_list
primi_10
hist(mat_aut[,48],freq=F)
hist(mat_nor[,48], add = T,freq = F)
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(2000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi_10],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/400
mat_corr <- matrix(nrow = 600, ncol = 116)
#mat_corr[,117] <- train$age
#mat_corr[,118] <- train$sex
for (j in 1:600){
mat_corr[j,1:116] <- apply(abs(pcor(mod[[j]])$estimate), MARGIN = 2, function(x) {sum(x<0.3)})
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
labels <- to_categorical(train$y[-to_del])
mat_nor <- mat_corr[train$y[-to_del]==0,]
mat_aut <- mat_corr[train$y[-to_del]==1,]
hist(mat_aut[,48],freq=F)
hist(mat_nor[,48], add = T,freq = F)
quan_list <- rep(NA,116)
for (i in 1:116){
quan_nor <- quantile(mat_nor[,i], probs = c(0.25,0.75))
quan_aut <- quantile(mat_aut[,i], probs = c(0.25,0.75))
quan_list[i] <- abs(quan_nor[1]-quan_aut[1]) + abs(quan_nor[2]-quan_aut[2])
}
primi_10 <- order(quan_list, decreasing = T)[1:10]
quan_list[primi_10]
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(2000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi_10],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/400
mat_corr <- matrix(nrow = 600, ncol = 116)
#mat_corr[,117] <- train$age
#mat_corr[,118] <- train$sex
for (j in 1:600){
mat_corr[j,1:116] <- apply(abs(pcor(mod[[j]])$estimate), MARGIN = 2, function(x) {sum(x<0.4)})
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
labels <- to_categorical(train$y[-to_del])
mat_nor <- mat_corr[train$y[-to_del]==0,]
mat_aut <- mat_corr[train$y[-to_del]==1,]
hist(mat_aut[,48],freq=F)
hist(mat_nor[,48], add = T,freq = F)
quan_list <- rep(NA,116)
for (i in 1:116){
quan_nor <- quantile(mat_nor[,i], probs = c(0.25,0.75))
quan_aut <- quantile(mat_aut[,i], probs = c(0.25,0.75))
quan_list[i] <- abs(quan_nor[1]-quan_aut[1]) + abs(quan_nor[2]-quan_aut[2])
}
primi_10 <- order(quan_list, decreasing = T)[1:10]
quan_list[primi_10]
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(2000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi_10],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/400
mat_corr <- matrix(nrow = 600, ncol = 116)
#mat_corr[,117] <- train$age
#mat_corr[,118] <- train$sex
for (j in 1:600){
mat_corr[j,1:116] <- apply(abs(pcor(mod[[j]])$estimate), MARGIN = 2, function(x) {sum(x<0.5)})
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
labels <- to_categorical(train$y[-to_del])
mat_nor <- mat_corr[train$y[-to_del]==0,]
mat_aut <- mat_corr[train$y[-to_del]==1,]
hist(mat_aut[,48],freq=F)
hist(mat_nor[,48], add = T,freq = F)
quan_list <- rep(NA,116)
for (i in 1:116){
quan_nor <- quantile(mat_nor[,i], probs = c(0.25,0.75))
quan_aut <- quantile(mat_aut[,i], probs = c(0.25,0.75))
quan_list[i] <- abs(quan_nor[1]-quan_aut[1]) + abs(quan_nor[2]-quan_aut[2])
}
primi_10 <- order(quan_list, decreasing = T)[1:10]
quan_list[primi_10]
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(2000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi_10],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/400
primi_10
hist(mat_aut[,9],freq=F)
hist(mat_nor[,9], add = T,freq = F)
hist(mat_aut[,9],freq=F)
hist(mat_nor[,9], add = T,freq = F)
mat_corr
mat_corr <- matrix(nrow = 600, ncol = 116)
#mat_corr[,117] <- train$age
#mat_corr[,118] <- train$sex
for (j in 1:600){
mat_corr[j,1:116] <- apply(abs(cor(mod[[j]])), MARGIN = 2, function(x) {sum(x<0.5)})
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
labels <- to_categorical(train$y[-to_del])
mat_nor <- mat_corr[train$y[-to_del]==0,]
mat_aut <- mat_corr[train$y[-to_del]==1,]
hist(mat_aut[,9],freq=F)
hist(mat_nor[,9], add = T,freq = F)
quan_list <- rep(NA,116)
for (i in 1:116){
quan_nor <- quantile(mat_nor[,i], probs = c(0.2,0.8))
quan_aut <- quantile(mat_aut[,i], probs = c(0.2,0.8))
quan_list[i] <- abs(quan_nor[1]-quan_aut[1]) + abs(quan_nor[2]-quan_aut[2])
}
primi_10 <- order(quan_list, decreasing = T)[1:10]
quan_list[primi_10]
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(2000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi_10],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/400
mat_corr <- matrix(NA,600,6670)
for (j in 1:600){
mat <- cor(mod[[j]])
mat_corr[j,] <- mat[lower.tri(mat)]
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
mat_corr
mat_corr[j,]
mat[lower.tri(mat)]
for (j in 1:600){
mat <- cor(mod[[j]])
mat_corr[j,] <- mat[lower.tri(mat)]
#mat_corr[j,1:116] <- mat_corr[j,1:116]/sum(mat_corr[j,1:116])*100
}
to_del <- unique(which(is.na(mat_corr), arr.ind = T)[,1])
mat_corr <- mat_corr[-to_del,]
mat_corr <- cbind(mat_corr,train$sex[-to_del],train$age[-to_del])
rf <- foreach(ntree=rep(1000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr,
factor(train$y[-to_del], levels = c(0,1)),
ntree = ntree)
}
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(1000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr,
factor(train$y[-to_del], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
primi <- rf$importance
primi
primi <- order[rf$importance]
order(rf$importance)
primi <- order(rf$importance, decreasing = T)
primi
primi <- order(rf$importance, decreasing = T)[1:10]
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/584
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(1000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[primi,],
factor(train$y[-to_del], levels = c(0,1)),
ntree = ntree)
}
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/584
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(1000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[primi,],
factor(train$y[-to_del], levels = c(0,1)),
ntree = ntree)
}
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(1000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[,primi],
factor(train$y[-to_del], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/584
sum(abs(as.numeric(predict(rf,mat_corr[401:584,]))-1-train$y[-to_del][401:584]))/184
sum(abs(as.numeric(predict(rf,mat_corr[401:584,primi]))-1-train$y[-to_del][401:584]))/184
as.numeric(predict(rf,mat_corr[401:584,primi]))
train$y[-to_del][401:584])
train$y[-to_del][401:584]
sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/584
sum(abs(as.numeric(predict(rf,mat_corr[401:584,primi]))-1-train$y[-to_del][401:584]))
abs(as.numeric(predict(rf,mat_corr[401:584,primi]))-1-train$y[-to_del][401:584])
as.numeric(predict(rf,mat_corr[401:584,primi])
as.numeric(predict(rf,mat_corr[401:584,primi]))
as.numeric(predict(rf,mat_corr[401:584,primi]))
sum(abs(train$y[-to_del]-as.numeric(predict(rf,mat_corr[401:584,primi]))+1))/584
sum(abs(train$y[-to_del]-as.numeric(predict(rf,mat_corr[,primi]))+1))/584
train$y[-to_del]
as.numeric(predict(rf,mat_corr[,primi]))+1)
as.numeric(predict(rf,mat_corr[,primi]))+1
-as.numeric(predict(rf,mat_corr[,primi]))+1
train$y[-to_del]
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del], levels = c(0,1)),
ntree = 400)
library(randomForest)
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del], levels = c(0,1)),
ntree = 400)
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = 400)
sum(abs(train$y[-to_del][1:400]-as.numeric(predict(rf,mat_corr[1:400,primi]))+1))/400
sum(abs(as.numeric(predict(rf,mat_corr[401:584,primi]))-1-train$y[-to_del][401:584]))/184
as.numeric(predict(rf,mat_corr[401:584,primi]))-1
sum(abs(as.numeric(predict(rf,mat_corr[401:584,primi]))-1-train$y[-to_del][401:584]))/184
as.numeric(predict(rf,mat_corr[401:584,primi]))
as.numeric(predict(rf,mat_corr[401:584,primi]))-1
train$y[-to_del][401:584]
sum(abs(as.numeric(predict(rf,mat_corr[401:584,primi]))-1-train$y[-to_del][401:584]))/184
sum(abs((as.numeric(predict(rf,mat_corr[401:584,primi]))-1)-train$y[-to_del][401:584]))/184
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = 100)
primi <- order(rf$importance, decreasing = T)[1:10]
sum(abs(train$y[-to_del][1:400]-as.numeric(predict(rf,mat_corr[1:400,primi]))+1))/400
sum(abs((as.numeric(predict(rf,mat_corr[401:584,primi]))-1)-train$y[-to_del][401:584]))/184
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = 200)
primi <- order(rf$importance, decreasing = T)[1:10]
sum(abs(train$y[-to_del][1:400]-as.numeric(predict(rf,mat_corr[1:400,primi]))+1))/400
sum(abs((as.numeric(predict(rf,mat_corr[401:584,primi]))-1)-train$y[-to_del][401:584]))/184
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = 300)
primi <- order(rf$importance, decreasing = T)[1:10]
sum(abs(train$y[-to_del][1:400]-as.numeric(predict(rf,mat_corr[1:400,primi]))+1))/400
sum(abs((as.numeric(predict(rf,mat_corr[401:584,primi]))-1)-train$y[-to_del][401:584]))/184
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = 1000)
primi <- order(rf$importance, decreasing = T)[1:10]
sum(abs(train$y[-to_del][1:400]-as.numeric(predict(rf,mat_corr[1:400,primi]))+1))/400
sum(abs((as.numeric(predict(rf,mat_corr[401:584,primi]))-1)-train$y[-to_del][401:584]))/184
primi
mat_corr
rf <- randomForest(mat_corr[1:400,],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = 1000)
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(1000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
library(doParallel)
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(1000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del], levels = c(0,1)),
ntree = ntree)
}
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(1000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
primi <- order(rf$importance, decreasing = T)[1:10]
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
rf <- foreach(ntree=rep(1000, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr[1:400,],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
primi <- order(rf$importance, decreasing = T)[1:10]
sum(abs(train$y[-to_del][1:400]-as.numeric(predict(rf,mat_corr[1:400,primi]))+1))/400
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = 1000)
rf
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = 3000)
rf
rf <- randomForest(mat_corr[1:400,primi],
factor(train$y[-to_del][1:400], levels = c(0,1)),
ntree = 5000)
rf
