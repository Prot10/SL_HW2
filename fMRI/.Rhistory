weight = "bold"
)
),
locations = list(
cells_row_groups(
groups  = c("Biscoe Island", "Dream Island", "Torgersen Island")
)
)
) %>%
tab_style(
style = list(
cell_text(
font = "Oswald",
align = "center",
weight = "bold"
)
),
locations = cells_summary(groups = T, columns = T)
) %>%
opt_all_caps() %>%
opt_table_outline() %>%
tab_source_note("Data:Dr. Kristen Gorman &  Palmer Station LTER  | Viz: @ManasiM_10")
tibble()
tab = table %>%
tibble() %>%
filter(species == "Adelie") %>%
group_by(island, year) %>%
summarise_if(is.numeric, sum) %>%
mutate(island = case_when(
island == "Biscoe" ~ "Biscoe Island",
island == "Dream" ~ "Dream Island",
island == "Torgersen" ~ "Torgersen Island")) %>%
gt(rowname_col =  "year") %>%
tab_spanner(
label = "Male",
columns = vars(bill_length_mm_male, bill_depth_mm_male,
flipper_length_mm_male,body_mass_g_male)
) %>%
tab_spanner(
label = "Female",
columns = vars(bill_length_mm_female,bill_depth_mm_female,
flipper_length_mm_female, body_mass_g_female)
) %>%
tab_style(
style = list(
cell_text(
font = "Oswald",
align = "center"
)
),
locations = cells_column_spanners(spanners = vars("Female", "Male"))
) %>%
summary_rows(
groups = TRUE,
columns = vars(bill_length_mm_male, bill_depth_mm_male,
flipper_length_mm_male,body_mass_g_male,
bill_length_mm_female,bill_depth_mm_female,
flipper_length_mm_female, body_mass_g_female),
fns = list(AVERAGE = "mean"),
formatter = fmt_number,
use_seps = T,
decimals = 0
) %>%
fmt_number(columns = vars(bill_length_mm_male, bill_depth_mm_male,
flipper_length_mm_male,body_mass_g_male,
bill_length_mm_female,bill_depth_mm_female,
flipper_length_mm_female, body_mass_g_female),
decimals = 0)%>%
data_color(
columns = vars(bill_length_mm_male, bill_depth_mm_male,
flipper_length_mm_male,body_mass_g_male,
bill_length_mm_female,bill_depth_mm_female,
flipper_length_mm_female, body_mass_g_female),
colors = scales::col_numeric(
palette = paletteer::paletteer_d(
palette = "palettetown::swablu"
) %>% as.character(),
domain = NULL)) %>%
tab_footnote(
footnote = "In mm",
locations = cells_column_labels(
columns  = vars(bill_length_mm_male,
bill_depth_mm_male,
flipper_length_mm_female,
bill_length_mm_female,
bill_depth_mm_female,
flipper_length_mm_male)
)
) %>%
tab_footnote(
footnote = "In grams",
location = cells_column_labels(
columns = vars(body_mass_g_male, body_mass_g_female)
)
) %>%
tab_style(
style = list(
cell_text(
font = "Oswald",
align = "center"
)
),
locations = list(
cells_body(columns = vars(bill_length_mm_male,
bill_depth_mm_male,
flipper_length_mm_female,
bill_length_mm_female,
bill_depth_mm_female,
flipper_length_mm_male,
body_mass_g_male,
body_mass_g_female))
)
) %>%
cols_label(
bill_length_mm_male = "Bill Length",
bill_depth_mm_male = "Bill Depth",
flipper_length_mm_male = "Flipper Length",
body_mass_g_male = "Body mass (in 00's)",
bill_length_mm_female = "Bill Length",
bill_depth_mm_female = "Bill Depth",
flipper_length_mm_female = "Flipper Length",
body_mass_g_female = "Body mass (in 00's)") %>%
tab_header(
title = md(paste0(emo::ji("penguin"),emo::ji("penguin"),"All About Adelie Penguins",emo::ji("penguin"),emo::ji("penguin"))),
subtitle = "Yearly measurements of Bill depth, Bill length, Body Mass and Flipper Length in each island "
)  %>%
cols_align(align = "right", columns = TRUE) %>%
tab_options(
summary_row.background.color = "#feebe2",
row_group.background.color = "#ffffcc",
heading.background.color = "#c6dbef",
column_labels.background.color = "#edf8fb",
stub.background.color = "#edf8fb",
table.font.color = "#323232",
table_body.hlines.color = "#989898",
table_body.border.top.color = "#989898",
heading.border.bottom.color = "#989898",
row_group.border.top.color = "#989898",
row_group.border.bottom.style = "none",
stub.border.style = "dashed",
stub.border.color = "#989898",
stub.border.width = "1px",
summary_row.border.color = "#989898",
table.width = "60%",
footnotes.background.color = "#edf8fb",
source_notes.background.color = "#f6eff7",
source_notes.font.size = "8px",
footnotes.font.size = "9px"
) %>%
tab_style(
style = list(
cell_text(
font = "Oswald",
align = "center",
weight = "bold"
)
),
locations = list(
cells_title(groups = "title")
)
) %>%
# Adjust sub-title font
tab_style(
style = list(
cell_text(
font = "Oswald",
align = "center",
weight = "bold"
)
),
locations = list(
cells_title(groups = "subtitle")
)
)  %>%
gt::tab_style(
style = list(
cell_text(font = "Oswald", weight = "bold")
),
locations = list(
cells_column_labels(gt::everything())
)
)%>%
tab_style(
style = list(
cell_text(
font = "Oswald",
align = "center",
weight = "bold"
)
),
locations = list(
cells_row_groups(
groups  = c("Biscoe Island", "Dream Island", "Torgersen Island")
)
)
) %>%
tab_style(
style = list(
cell_text(
font = "Oswald",
align = "center",
weight = "bold"
)
),
locations = cells_summary(groups = T, columns = T)
) %>%
opt_all_caps() %>%
opt_table_outline() %>%
tab_source_note("Data:Dr. Kristen Gorman &  Palmer Station LTER  | Viz: @ManasiM_10")
tab = table %>%
tibble() %>%
filter(species == "Adelie") %>%
group_by(island, year) %>%
summarise_if(is.numeric, sum) %>%
mutate(island = case_when(
island == "Biscoe" ~ "Biscoe Island",
island == "Dream" ~ "Dream Island",
island == "Torgersen" ~ "Torgersen Island")) %>%
gt(rowname_col =  "year") %>%
tab_spanner(
label = "Male",
columns = vars(bill_length_mm_male, bill_depth_mm_male,
flipper_length_mm_male,body_mass_g_male)
) %>%
tab_spanner(
label = "Female",
columns = vars(bill_length_mm_female,bill_depth_mm_female,
flipper_length_mm_female, body_mass_g_female)
) %>%
tab_style(
style = list(
cell_text(
font = "Oswald",
align = "center"
)
),
locations = cells_column_spanners(spanners = vars("Female", "Male"))
)
plot1 <- tab %>%
tab_spanner(
label = "Best RF",
columns = vars(firsts,rf$importance[firsts],theta[firsts])
) %>%
tab_spanner(
label = "Best LOCO",
columns = vars(theta_best, rf$importance[theta_best], theta[theta_best])
) %>%
tab_style(
style = list(
cell_text(
font = "Oswald",
align = "center"
)
),
locations = cells_column_spanners(spanners = vars("Best RF","Best LOCO"))
)
install.packages("tidyverse","paletteer")
install.packages("tidyverse")
data.frame(firsts,rf$importance[firsts],theta[firsts]) %>%
gt()
data.frame(firsts,rf$importance[firsts],theta[firsts],theta_best,rf$importance[theta_best],theta[theta_best]) %>%
gt() %>%
tab_spanner(
label = "Best RF",
columns = vars(firsts,rf$importance[firsts],theta[firsts])
) %>%
tab_spanner(
label = "Best LOCO",
columns = vars(theta_best,rf$importance[theta_best],theta[theta_best]))
as.integer(rf$importance[firsts])
data.frame(firsts,as.integer(rf$importance[firsts]),theta[firsts],theta_best,rf$importance[theta_best],theta[theta_best]) %>%
gt() %>%
tab_spanner(
label = "Best RF",
columns = vars(firsts,rf$importance[firsts],theta[firsts])
) %>%
tab_spanner(
label = "Best LOCO",
columns = vars(theta_best,rf$importance[theta_best],theta[theta_best]))
data.frame(firsts,as.integer(rf$importance[firsts]),theta[firsts],theta_best,rf$importance[theta_best],theta[theta_best]) %>%
gt() %>%
tab_spanner(
label = "Best RF",
columns = vars(firsts,as.integer(rf$importance[firsts]),theta[firsts])
) %>%
tab_spanner(
label = "Best LOCO",
columns = vars(theta_best,as.integer(rf$importance[theta_best]),theta[theta_best]))
theta[firsts]
theta = 1:20
data.frame(firsts,as.integer(rf$importance[firsts]),theta[firsts],theta_best,rf$importance[theta_best],theta[theta_best]) %>%
gt() %>%
tab_spanner(
label = "Best RF",
columns = vars(firsts,as.integer(rf$importance[firsts]),theta[firsts])
) %>%
tab_spanner(
label = "Best LOCO",
columns = vars(theta_best,as.integer(rf$importance[theta_best]),theta[theta_best]))
data.frame(firsts,as.integer(rf$importance[firsts]),theta[firsts],theta_best,rf$importance[theta_best],theta[theta_best]) %>%
gt() %>%
tab_spanner(
label = "Best RF",
columns = c(firsts,as.integer(rf$importance[firsts]),theta[firsts])
) %>%
tab_spanner(
label = "Best LOCO",
columns = c(theta_best,as.integer(rf$importance[theta_best]),theta[theta_best]))
theta[firsts]
first_loco <- order(theta, decrescent=T)[1:10]
theta_rf <- theta[first_rf]
theta_theta <- theta[first_loco]
rf_theta <- rf$importance[first_loco]
data = data.frame(first_rf,first_loco,rf_rf,theta_rf,rf_theta,theta_theta)
numWorkers <- detectCores()
library(doParallel)
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
# Build 200-tree random forest
rf <- foreach(ntree=rep(50, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr,
factor(train$y, levels = c(0,1)),
ntree = ntree)
}
library(doParallel)
library(boot)
library(randomForest)
mat_corr <- ifelse(is.na(mat_corr),0,mat_corr)
# Fit the model with different lambda values
mod_pre <- cv.glmnet(mat_corr, train$y, alpha = 1, family = "binomial")
library(glmnet)
# Fit the model with different lambda values
mod_pre <- cv.glmnet(mat_corr, train$y, alpha = 1, family = "binomial")
# Fit the model with different lambda values
mod_pre <- cv.glmnet(mat_corr, train$y, alpha = 1, family = "binomial")
# Don't use the best lambda:
lam_pre <- mod_true$lambda.min/3
dim(mat_corr)
# Don't use the best lambda:
lam_pre <- mod_true$lambda.min/3
model_pre <- glmnet(mat_corr, train$y, alpha = 1, lambda = lam_pre, family = "binomial")
only_this <- as.numeric(model_pre$beta!=0)
cat("Initial number of features:",dim(mat_corr)[2] ,"\nFinale number of features:",sum(only_this))
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
# Build 200-tree random forest
rf <- foreach(ntree=rep(50, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr,
factor(train$y, levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
# Take the 10 features most important
first_rf <- order(rf$importance,decreasing = T)[1:10]
rf_rf <- rf$importance[first_rf]
print(paste("The train error using random forest
print(paste("The train error using random forest is",round(sum(abs(as.numeric(rf$y)-as.numeric(rf$predicted)))/600,3)))
# Take the 10 features most important
first_rf <- order(rf$importance,decreasing = T)[1:10]
rf_rf <- rf$importance[first_rf]
rf_rf
# Take only the survived features
D_1_only_this <- D_1[,which(only_this==1,arr.ind=T)]
D_2_only_this <- D_2[,which(only_this==1,arr.ind=T)]
# Train the model with different lambda values
mod_OT <- cv.glmnet(D_1_only_this, lab_D_1, alpha = 1, family = "binomial")
lam_true_OT <- mod_OT$lambda.1se
model_true_OT <- glmnet(D_1_only_this, lab_D_1, alpha = 1, lambda = lam_true_OT, family = "binomial")
test_err <- sum(abs(as.numeric(predict(model_true_OT,D_2_only_this,type="class"))-lab_D_2))/length(lab_D_2)
cat("The error on the D_2 is:", test_err)
# Fit all the remove the i-th column
mod_for <- list()
for (i in 1:model_true$df){
print(i)
mod_f <- cv.glmnet(D_1_only_this[,-i], lab_D_1, alpha = 1, family = "binomial")
lam_for <- mod_f$lambda.1se
mod_for[[i]] <- glmnet(D_1_only_this[,-i], lab_D_1, alpha = 1, lambda = lam_for, family = "binomial")
}
# Fit the model with different lambda values
mod_pre <- cv.glmnet(mat_corr, train$y, alpha = 1, family = "binomial")
# Don't use the best lambda:
lam_pre <- mod_true$lambda.min/2
model_pre <- glmnet(mat_corr, train$y, alpha = 1, lambda = lam_pre, family = "binomial")
only_this <- as.numeric(model_pre$beta!=0)
cat("Initial number of features:",dim(mat_corr)[2] ,"\nFinale number of features:",sum(only_this))
numWorkers <- detectCores()
cl <- makeCluster(numWorkers)
cl <- makeCluster(numWorkers)
registerDoParallel(cl)
# Build 200-tree random forest
rf <- foreach(ntree=rep(50, numWorkers),
.combine=randomForest::combine,
.multicombine=TRUE,
.packages='randomForest') %dopar% {
randomForest(mat_corr,
factor(train$y, levels = c(0,1)),
ntree = ntree)
}
stopCluster(cl)
# Take the 10 features most important
first_rf <- order(rf$importance,decreasing = T)[1:10]
rf_rf <- rf$importance[first_rf]
print(paste("The train error using random forest
# Take only the survived features
D_1_only_this <- D_1[,which(only_this==1,arr.ind=T)]
D_2_only_this <- D_2[,which(only_this==1,arr.ind=T)]
# Train the model with different lambda values
mod_OT <- cv.glmnet(D_1_only_this, lab_D_1, alpha = 1, family = "binomial")
# Take only the survived features
D_1_only_this <- D_1[,which(only_this==1,arr.ind=T)]
D_2_only_this <- D_2[,which(only_this==1,arr.ind=T)]
# Train the model with different lambda values
mod_OT <- cv.glmnet(D_1_only_this, lab_D_1, alpha = 1, family = "binomial")
lam_true_OT <- mod_OT$lambda.1se
model_true_OT <- glmnet(D_1_only_this, lab_D_1, alpha = 1, lambda = lam_true_OT, family = "binomial")
test_err <- sum(abs(as.numeric(predict(model_true_OT,D_2_only_this,type="class"))-lab_D_2))/length(lab_D_2)
cat("The error on the D_2 is:", test_err)
# Fit all the remove the i-th column
mod_for <- list()
for (i in 1:model_true$df){
print(i)
mod_f <- cv.glmnet(D_1_only_this[,-i], lab_D_1, alpha = 1, family = "binomial")
lam_for <- mod_f$lambda.1se
mod_for[[i]] <- glmnet(D_1_only_this[,-i], lab_D_1, alpha = 1, lambda = lam_for, family = "binomial")
}
# Function which we'll use to calculate the confidence intervall
fun_boot <- function(data, ind, feat, model_true, model_j){
new_data <- data[ind,]
true <- predict(model_true_OT,
new_data,
type = "response")
meno_j <- predict(model_j,
new_data[,-feat],
type = "response")
return(sum((lab_D_2-as.numeric(meno_j))^2)-sum((lab_D_2-as.numeric(true))^2))
}
# Estimation of the loss median
b <- list()
theta <- rep(NA,model_true$df)
conf_int <- matrix(NA,model_true$df,2)
for (i in 1:model_true$df){
print(i)
b[[i]] <- boot(D_2_only_this,
statistic = fun_boot,
R = 300,
feat = i,
model_true = model_true,
model_j = mod_for[[i]],
ncpus = 4)
s_d <- sd(b$t)
theta[i] <- median(b[[i]]$t)
conf_int[i,] <- c(b_median[i]-s_d*2/sqrt(300/2),b_median[i]-s_d*2/sqrt(300/2))
}
first_loco <- order(theta, decrescent=T)[1:10]
first_loco <- order(theta, decrescent=T)[1:10]
theta
order(theta, decrescent=T)
theta
first_loco
first_loco <- order(theta, decreasing=T)[1:10]
theta_rf <- theta[first_rf]
theta_theta <- theta[first_loco]
rf_theta <- rf$importance[first_loco]
data = data.frame(first_rf,first_loco,rf_rf,theta_rf,rf_theta,theta_theta)
tab = data %>%
gt() %>%
tab_spanner(
label = "Best RF",
columns = vars(bill_length_mm_male, bill_depth_mm_male,
flipper_length_mm_male,body_mass_g_male)
) %>%
tab_spanner(
label = "Best LOCO",
columns = vars(bill_length_mm_female,bill_depth_mm_female,
flipper_length_mm_female, body_mass_g_female))
tab = data %>%
gt() %>%
tab_spanner(
label = "Best RF",
columns = vars(first_rf, rf_rf,theta_rf)
) %>%
tab_spanner(
label = "Best LOCO",
columns = vars(first_loco,rf_theta,theta_theta))
tab = data %>%
gt() %>%
tab_spanner(
label = "Best RF",
columns = c(first_rf, rf_rf,theta_rf)
) %>%
tab_spanner(
label = "Best LOCO",
columns = c(first_loco,rf_theta,theta_theta))
tab = data %>%
gt() %>%
tab_spanner(
label = "Best RF",
columns = c(first_rf, rf_rf,theta_rf)
) %>%
tab_spanner(
label = "Best LOCO",
columns = c(first_loco,rf_theta,theta_theta))
tab
